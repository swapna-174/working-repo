using System;
using System.Data;
using System.IO;
using System.Text;
using Microsoft.SqlServer.Dts.Runtime;

[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
{
    public void Main()
    {
        try
        {
            // ===== 1) Read variables =====
            string outPath = GetVar<string>("User::OutPath");
            string title   = GetVarOrDefault("User::Title", "SSIS HTML Report");
            string customTemplate = GetVarOrDefault("User::HtmlTemplate", null);

            // ===== 2) Option A: Use a simple built-in HTML template =====
            string defaultHtml = $@"
<!DOCTYPE html>
<html lang=""en"">
<head>
  <meta charset=""utf-8"">
  <meta name=""viewport"" content=""width=device-width, initial-scale=1"">
  <title>{Escape(title)}</title>
  <style>
    body {{ font-family: Arial, Helvetica, sans-serif; margin: 24px; }}
    h1 {{ margin-top: 0; }}
    .meta {{ color:#555; margin-bottom: 16px; }}
    table {{ border-collapse: collapse; width: 100%; }}
    th, td {{ border: 1px solid #ddd; padding: 8px; }}
    th {{ background: #f4f4f4; text-align: left; }}
    tr:nth-child(even) {{ background: #fafafa; }}
    .note {{ margin-top: 16px; font-size: 12px; color:#666; }}
  </style>
</head>
<body>
  <h1>{Escape(title)}</h1>
  <div class=""meta"">Generated: {DateTime.Now:yyyy-MM-dd HH:mm}</div>

  <!-- Replace this section with your own content if needed -->
  <p>This file was generated by an SSIS Script Task.</p>

  <div class=""note"">Edit the Script Task to customize this page or bind it to a query result set.</div>
</body>
</html>";

            // If you supplied a custom template via variable, use it; otherwise use the default.
            string html = String.IsNullOrEmpty(customTemplate) ? defaultHtml : customTemplate;

            // ===== 3) Option B: Render a DataTable as an HTML table (if ResultSet provided) =====
            // If an Execute SQL Task (Full result set) wrote to User::ResultSet, convert and append
            if (VariableExists("User::ResultSet"))
            {
                object rsObj = Dts.Variables["User::ResultSet"].Value;
                DataTable dt = ConvertToDataTable(rsObj);   // supports ADODB.Recordset & DataTable

                if (dt != null && dt.Columns.Count > 0)
                {
                    string tableHtml = BuildHtmlTable(dt, "Query Results");
                    // Insert before closing </body>. If not found, just append.
                    int idx = html.IndexOf("</body>", StringComparison.OrdinalIgnoreCase);
                    if (idx >= 0)
                        html = html.Insert(idx, tableHtml);
                    else
                        html += tableHtml;
                }
            }

            // ===== 4) Write the file (UTF-8) =====
            Directory.CreateDirectory(Path.GetDirectoryName(outPath) ?? ".");
            File.WriteAllText(outPath, html, new UTF8Encoding(encoderShouldEmitUTF8Identifier: false));

            Dts.TaskResult = (int)ScriptResults.Success;
        }
        catch (Exception ex)
        {
            // Bubble a meaningful error to SSIS
            Dts.Events.FireError(0, "Script Task - Generate HTML", ex.Message + Environment.NewLine + ex.StackTrace, "", 0);
            Dts.TaskResult = (int)ScriptResults.Failure;
        }
    }

    // ========== Helpers ==========

    private T GetVar<T>(string name)
    {
        return (T)Dts.Variables[name].Value;
    }

    private string GetVarOrDefault(string name, string fallback)
    {
        return VariableExists(name) ? Convert.ToString(Dts.Variables[name].Value) : fallback;
    }

    private bool VariableExists(string name)
    {
        try { var _ = Dts.Variables[name]; return true; }
        catch { return false; }
    }

    // Safely convert an SSIS Full Result Set to a DataTable
    private DataTable ConvertToDataTable(object resultSet)
    {
        if (resultSet == null) return null;

        // Case 1: Already a DataTable (ADO.NET)
        if (resultSet is DataTable dt) return dt;

        // Case 2: ADODB.Recordset (Execute SQL Task with ADO)
        try
        {
            // Late-binding to avoid adding references
            var rs = resultSet; // ADODB.Recordset
            var typeName = rs.GetType().FullName ?? "";
            if (typeName.Contains("ADODB.Recordset", StringComparison.OrdinalIgnoreCase))
            {
                return FromAdodbRecordset(rs);
            }
        }
        catch { /* ignore and return null */ }

        return null;
    }

    // Convert ADODB.Recordset to DataTable via reflection (no explicit COM reference needed)
    private DataTable FromAdodbRecordset(object adodbRecordset)
    {
        var dt = new DataTable();

        // Fields
        var fields = adodbRecordset.GetType().InvokeMember("Fields",
            System.Reflection.BindingFlags.GetProperty, null, adodbRecordset, null);

        int fieldCount = (int)fields.GetType().InvokeMember("Count",
            System.Reflection.BindingFlags.GetProperty, null, fields, null);

        for (int i = 0; i < fieldCount; i++)
        {
            var field = fields.GetType().InvokeMember("Item",
                System.Reflection.BindingFlags.GetProperty, null, fields, new object[] { i });

            string name = field.GetType().InvokeMember("Name",
                System.Reflection.BindingFlags.GetProperty, null, field, null)?.ToString() ?? $"Col{i+1}";

            dt.Columns.Add(name);
        }

        // Iterate rows
        bool eof = (bool)adodbRecordset.GetType().InvokeMember("EOF",
            System.Reflection.BindingFlags.GetProperty, null, adodbRecordset, null);

        while (!eof)
        {
            var row = dt.NewRow();
            for (int i = 0; i < fieldCount; i++)
            {
                var field = fields.GetType().InvokeMember("Item",
                    System.Reflection.BindingFlags.GetProperty, null, fields, new object[] { i });

                object value = field.GetType().InvokeMember("Value",
                    System.Reflection.BindingFlags.GetProperty, null, field, null);

                row[i] = value ?? DBNull.Value;
            }

            dt.Rows.Add(row);

            // MoveNext
            adodbRecordset.GetType().InvokeMember("MoveNext",
                System.Reflection.BindingFlags.InvokeMethod, null, adodbRecordset, null);

            eof = (bool)adodbRecordset.GetType().InvokeMember("EOF",
                System.Reflection.BindingFlags.GetProperty, null, adodbRecordset, null);
        }

        return dt;
    }

    // Build a clean HTML table from a DataTable
    private string BuildHtmlTable(DataTable dt, string heading)
    {
        var
