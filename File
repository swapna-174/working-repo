WITH prevStatuses AS (
  SELECT RESEARCH_ID,
         LINE,
         LAG(HX_BILLING_STATUS_C) OVER (PARTITION BY RESEARCH_ID ORDER BY LINE ASC) PREV_BILLING_STATUS_C
  FROM RSH_HISTORY 
  WHERE RSH_HISTORY.RESEARCH_ID > '<<LowerBound>>'
    AND RSH_HISTORY.RESEARCH_ID <= '<<UpperBound>>' 
),

statusChanges AS (
  SELECT RSH_HISTORY.RESEARCH_ID,
         RSH_HISTORY.LINE,
         RSH_HISTORY.HX_BILLING_STATUS_C,
         CAST( RSH_HISTORY.HX_MOD_LOCAL_DTTM AS DATE ) STATUS_START_DATE
    FROM RSH_HISTORY
      INNER JOIN prevStatuses
        ON RSH_HISTORY.RESEARCH_ID = prevStatuses.RESEARCH_ID
          AND RSH_HISTORY.LINE = prevStatuses.LINE
  WHERE prevStatuses.PREV_BILLING_STATUS_C <> RSH_HISTORY.HX_BILLING_STATUS_C
    OR (prevStatuses.PREV_BILLING_STATUS_C IS NULL AND RSH_HISTORY.HX_BILLING_STATUS_C IS NOT NULL)
    OR (prevStatuses.PREV_BILLING_STATUS_C IS NOT NULL AND RSH_HISTORY.HX_BILLING_STATUS_C IS NULL)
)

SELECT statusChanges.RESEARCH_ID,
       statusChanges.LINE,
       CASE WHEN statusChanges.HX_BILLING_STATUS_C IS NULL THEN '*Unspecified'
            WHEN ZC_RESEARCH_STATUS.RESEARCH_STATUS_C IS NULL THEN '*Unknown'
            ELSE ZC_RESEARCH_STATUS.NAME END BILLING_STATUS,
       statusChanges.STATUS_START_DATE,
       LEAD( statusChanges.STATUS_START_DATE, 1, DATEFROMPARTS( 9999, 12, 31 ) ) OVER ( PARTITION BY statusChanges.RESEARCH_ID ORDER BY statusChanges.STATUS_START_DATE, statusChanges.LINE ASC ) STATUS_END_DATE
FROM statusChanges
  LEFT OUTER JOIN ZC_RESEARCH_STATUS
    ON statusChanges.HX_BILLING_STATUS_C = ZC_RESEARCH_STATUS.RESEARCH_STATUS_C 
